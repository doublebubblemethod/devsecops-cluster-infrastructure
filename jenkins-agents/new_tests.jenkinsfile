def app_secrets = [
    [
      path: 'secrets/application',
      engineVersion: 2,
      secretValues: [
        [vaultKey: 'POSTGRES_PASSWORD', envVar: 'POSTGRES_PASS'],
        [vaultKey: 'POSTGRES_USER',     envVar: 'POSTGRES_USER'],
        [vaultKey: 'SONAR_TOKEN',     envVar: 'SONAR_TOKEN']
      ]
    ]
 ]

def configuration = [
    vaultUrl: 'https://vault-1.vault-internal.vault.svc.cluster.local:8200',
    vaultCredentialId: 'jenkins-approle',
    engineVersion: 2
]
def registry = 'docker.io/askdragon/petclinic'
def dockerImg
pipeline {
  agent {
      label 'kubeagent'
    }
  tools {
    jdk 'jdk17'
  }
  parameters {
    string(
      name: 'POSTGRES_URL',
      defaultValue: 'jdbc:postgresql://postgres-postgresql.application.svc.cluster.local:5432/postgres',
      description: 'JDBC URL for PostgreSQL database connection'
    )
    string(
      name: 'APP_CODEBASE',
      defaultValue: 'https://github.com/doublebubblemethod/petclinic-orchestrated.git',
      description: 'GIT URL of Petclinic repository'
    )
    string(
      name: 'SPRING_PROFILES_ACTIVE'
      defaultValue: 'dev'
    )
  }
  environment {
    SCANNER_HOME = tool 'sonar-scanner'
    POSTGRES_URL = "${params.POSTGRES_URL}"
    
  }
  stages {
    stage('Clean Workspace') { steps { cleanWs() } }

    stage('Checkout Code') {
      steps {
        git url: "${params.APP_CODEBASE}",
            branch: 'main'
      }
    }
    stage('Build with Maven') {
      steps {
        script{
          withVault([configuration: configuration, vaultSecrets: app_secrets]) {
            sh '''#!/bin/bash
                echo "Env var: ${SONAR_TOKEN}"
              mvn clean verify -Dspring.profiles.active=${params.SPRING_PROFILES_ACTIVE}

              '''
            }
        }
      }
    }
    stage("Sonarqube Analysis") {
          steps {
              withSonarQubeEnv('sonar-server') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Petclinc \
                -Dsonar.projectKey=Petclinc \
                -Dsonar.sources=src/main/java \
                -Dsonar.java.binaries=target/classes \
                -Dsonar.java.libraries=target
                '''
              }
          }
    }
}
  post {
    success { echo "✅ B complete: petclinic-app:${env.BUILD_NUMBER}" }
    failure { echo "❌ Pipeline failed" }
  }
}
